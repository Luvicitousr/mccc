import 'package:flutter/foundation.dart';
import '../engine/level_definition.dart';
import '../engine/petal_piece.dart';
import 'game_state_manager.dart';
import 'package:flutter/material.dart';
import 'dart:math' as math;

/// üéÆ Gerenciador de N√≠veis - Sistema Modular (VERS√ÉO FINAL)
class LevelManager {
  static LevelManager? _instance;
  static LevelManager get instance => _instance ??= LevelManager._();

  LevelManager._();

  final Map<int, LevelDefinition> _levelCache = {};

  LevelDefinition loadLevel(int levelNumber) {
    if (_levelCache.containsKey(levelNumber)) {
      return _levelCache[levelNumber]!;
    }
    final level = _createLevelDefinition(levelNumber);
    _levelCache[levelNumber] = level;
    return level;
  }

  LevelDefinition _createLevelDefinition(int levelNumber) {
    switch (levelNumber) {
      case 1:
        return _createLevel1();
      case 2:
        return _createLevel2();
      case 3:
        return _createLevel3();
      case 4:
        return _createLevel4();
      case 5:
        return _createLevel5();
      default:
        return _generateProceduralLevel(levelNumber);
    }
  }

  /// üå∏ N√≠vel 1 - Tutorial B√°sico
  LevelDefinition _createLevel1() {
    return LevelDefinition(
      levelNumber: 1,
      width: 6,
      height: 8,
      moves: 15,
      objectives: {
        PetalType.cherry: 10,
        PetalType.maple: 8,

        // ‚úÖ OBJETIVO ADICIONADO: Remover as 4 pe√ßas enjauladas.
        PetalType.caged1: 4,
      },
      layout: [
        // Linha 0 (topo)
        PetalType.empty, PetalType.empty, PetalType.empty, PetalType.empty,
        PetalType.empty, PetalType.empty,
        // Linhas 1 a 7 - '1' indica um espa√ßo para pe√ßa jog√°vel aleat√≥ria
        1, 1, 1, 1, 1, 1,
        1, 0, 0, 0, 0, 1,
        1, 0, 2, 2, 0, 1,
        1, 0, 2, 2, 0, 1,
        1, 0, 0, 0, 0, 1,
        1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1,
      ],
      title: "Primeiro Niwadama",
      description:
          "Liberte os ovos de Niwadama fazendo combina√ß√µes ao lado deles!",
      difficulty: LevelDifficulty.easy,

      // ‚úÖ 3. DEFINA AS PONTUA√á√ïES PARA AS ESTRELAS
      starThresholds: [
        1000,
        2500,
        4000,
      ], // 1 estrela: 1000, 2 estrelas: 2500, 3 estrelas: 4000
      specialFeatures: [
        LevelFeature.tutorial,
        LevelFeature.cages,
      ], // Adiciona a feature de jaulas
    );
  }

  /// üçÅ N√≠vel 2 - Introdu√ß√£o aos Obst√°culos
  LevelDefinition _createLevel2() {
    // ‚úÖ CORRE√á√ÉO: Layout convertido para o formato de planta baixa (blueprint).
    return LevelDefinition(
      levelNumber: 2,
      width: 6,
      height: 8,
      moves: 20,
      objectives: {
        PetalType.cherry: 12,
        PetalType.maple: 10,
        PetalType.orchid: 8,
      },
      layout: [
        // Linha 0 (topo)
        PetalType.empty, PetalType.empty, PetalType.empty, PetalType.empty,
        PetalType.empty, PetalType.empty,
        // Layout com inteiros: 1 = Pe√ßa Jog√°vel, 0 = Parede
        1, 1, 0, 0, 1, 1,
        1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1,
        1, 1, 0, 0, 1, 1,
        1, 1, 1, 1, 1, 1,
      ],
      title: "Pedras no Caminho",
      description: "Cuidado com as pedras! Elas n√£o podem ser movidas.",
      difficulty: LevelDifficulty.easy,

      // ‚úÖ 3. DEFINA AS PONTUA√á√ïES PARA AS ESTRELAS
      starThresholds: [
        1200, 2800, 4500
      ],
      specialFeatures: [LevelFeature.walls],
    );
  }

  /// üå∫ N√≠vel 3 - Mais Cores
  LevelDefinition _createLevel3() {
    // Passo 1: Crie a lista base e armazene em uma vari√°vel.
    // ‚úÖ CORRE√á√ÉO: Adicionado 'growable: true' para criar uma lista modific√°vel.
    final layout = List<dynamic>.filled(7 * 9, 1, growable: true);

    // Passo 2: Crie a lista de substitui√ß√µes.
    final replacements = [for (var i = 0; i < 7; ++i) PetalType.empty];

    // Passo 3: Modifique a lista 'layout' em si. Esta linha n√£o retorna valor.
    layout.replaceRange(0, 7, replacements);

    // Passo 4: Passe a lista j√° modificada para o construtor.
    return LevelDefinition(
      levelNumber: 3,
      width: 7,
      height: 9,
      moves: 25,
      objectives: {
        PetalType.cherry: 15,
        PetalType.maple: 12,
        PetalType.orchid: 10,
        PetalType.plum: 8,
      },
      layout: layout, // Use a vari√°vel que foi modificada.
      title: "Jardim Colorido",
      description:
          "Agora com quatro tipos de p√©talas! Planeje seus movimentos.",
      difficulty: LevelDifficulty.medium,

      // ‚úÖ 3. DEFINA AS PONTUA√á√ïES PARA AS ESTRELAS
      starThresholds: [
        1800, 4000, 6000
      ],
      specialFeatures: [LevelFeature.multiColor],
    );
  }

  /// ü•ö N√≠vel 4 - Introdu√ß√£o √†s Jaulas
  LevelDefinition _createLevel4() {
    return LevelDefinition(
      levelNumber: 4,
      width: 6,
      height: 8,
      moves: 18,
      objectives: {
        PetalType.cherry: 10,
        PetalType.maple: 8,
        PetalType.caged1: 4, // Objetivo agora √© a jaula
      },
      layout: [
        // Linha 0
        PetalType.empty, PetalType.empty, PetalType.empty, PetalType.empty,
        PetalType.empty, PetalType.empty,
        // Layout com inteiros: 1 = Pe√ßa Jog√°vel, 2 = Jaula
        1, 1, 2, 2, 1, 1,
        1, 1, 1, 1, 1, 1,
        1, 2, 1, 1, 2, 1,
        1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1,
      ],
      title: "Ovos Preciosos",
      description: "Quebre os ovos fazendo combina√ß√µes ao lado deles!",
      difficulty: LevelDifficulty.medium,

      // ‚úÖ 3. DEFINA AS PONTUA√á√ïES PARA AS ESTRELAS
      starThresholds: [
        2400, 5200, 7500
      ], // 1 estrela: 1000, 2 estrelas: 2500, 3 estrelas: 4000
      specialFeatures: [LevelFeature.cages],
    );
  }

  /// üí£ N√≠vel 5 - Primeira Bomba
  LevelDefinition _createLevel5() {
    // ‚úÖ CORRE√á√ÉO: Layout convertido para o formato de planta baixa (blueprint).
    return LevelDefinition(
      levelNumber: 5,
      width: 7,
      height: 9,
      moves: 22,
      objectives: {
        PetalType.cherry: 20,
        PetalType.maple: 15,
        PetalType.orchid: 12,
        PetalType.bomb: 1, // Usar a bomba
      },
      layout: [
        // Linha 0
        PetalType.empty, PetalType.empty, PetalType.empty, PetalType.empty,
        PetalType.empty, PetalType.empty, PetalType.empty,
        // Layout com inteiros: 1 = Pe√ßa, 0 = Parede, 4 = Bomba
        1, 1, 1, 0, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1,
        0, 1, 1, 4, 1, 1, 0,
        1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1,
      ],
      title: "Poder da Bomba",
      description:
          "Use a bomba para limpar uma grande √°rea! Combine 5 p√©talas para criar mais.",
      difficulty: LevelDifficulty.medium,

      // ‚úÖ 3. DEFINA AS PONTUA√á√ïES PARA AS ESTRELAS
      starThresholds: [
        3000,
        6400,
        9000,
      ], // 1 estrela: 1000, 2 estrelas: 2500, 3 estrelas: 4000
      specialFeatures: [LevelFeature.bombs, LevelFeature.walls],
    );
  }

  /// üé≤ Gera√ß√£o procedural para n√≠veis n√£o implementados
  LevelDefinition _generateProceduralLevel(int levelNumber) {
    final difficulty = _calculateDifficulty(levelNumber);
    final size = _calculateSize(levelNumber);
    final moves = _calculateMoves(levelNumber, difficulty);
    final objectives = _generateObjectives(levelNumber, difficulty);

    // ‚úÖ CORRE√á√ÉO: O layout procedural agora tamb√©m gera uma planta baixa.
    final layout = _generateProceduralLayout(
      size.width,
      size.height,
      levelNumber,
    );

    // ‚úÖ CHAMA A NOVA FUN√á√ÉO PARA GERAR AS METAS
    final starThresholds = _generateStarThresholds(levelNumber, difficulty);

    return LevelDefinition(
      levelNumber: levelNumber,
      width: size.width,
      height: size.height,
      moves: moves,
      objectives: objectives,
      layout: layout,
      title: "Jardim ${_getLevelTheme(levelNumber)}",
      description: _getLevelDescription(levelNumber),
      difficulty: difficulty,
      starThresholds: starThresholds, // ‚úÖ PASSA AS METAS GERADAS
      specialFeatures: _getSpecialFeatures(levelNumber),
    );
  }

  /// üìä Calcula dificuldade baseada no n√≠vel
  LevelDifficulty _calculateDifficulty(int levelNumber) {
    if (levelNumber <= 10) return LevelDifficulty.easy;
    if (levelNumber <= 20) return LevelDifficulty.medium;
    if (levelNumber <= 30) return LevelDifficulty.hard;
    return LevelDifficulty.expert;
  }

  /// üìê Calcula tamanho do tabuleiro
  ({int width, int height}) _calculateSize(int levelNumber) {
    if (levelNumber <= 5) return (width: 6, height: 8);
    if (levelNumber <= 15) return (width: 7, height: 9);
    if (levelNumber <= 25) return (width: 8, height: 10);
    return (width: 9, height: 11);
  }

  /// üéØ Calcula n√∫mero de movimentos
  int _calculateMoves(int levelNumber, LevelDifficulty difficulty) {
    final baseMoves = switch (difficulty) {
      LevelDifficulty.easy => 20,
      LevelDifficulty.medium => 18,
      LevelDifficulty.hard => 15,
      LevelDifficulty.expert => 12,
    };

    // Adiciona varia√ß√£o baseada no n√≠vel
    final variation = (levelNumber % 5) - 2; // -2 a +2
    return (baseMoves + variation).clamp(10, 30);
  }

  /// üéØ Gera objetivos do n√≠vel
  Map<PetalType, int> _generateObjectives(
    int levelNumber,
    LevelDifficulty difficulty,
  ) {
    final objectives = <PetalType, int>{};

    // Tipos b√°sicos sempre presentes
    objectives[PetalType.cherry] = _getObjectiveCount(
      levelNumber,
      difficulty,
      1.0,
    );
    objectives[PetalType.maple] = _getObjectiveCount(
      levelNumber,
      difficulty,
      0.8,
    );

    // Adiciona mais tipos conforme o n√≠vel
    if (levelNumber >= 3) {
      objectives[PetalType.orchid] = _getObjectiveCount(
        levelNumber,
        difficulty,
        0.6,
      );
    }
    if (levelNumber >= 5) {
      objectives[PetalType.plum] = _getObjectiveCount(
        levelNumber,
        difficulty,
        0.5,
      );
    }
    if (levelNumber >= 8) {
      objectives[PetalType.lily] = _getObjectiveCount(
        levelNumber,
        difficulty,
        0.4,
      );
    }
    if (levelNumber >= 12) {
      objectives[PetalType.peony] = _getObjectiveCount(
        levelNumber,
        difficulty,
        0.3,
      );
    }

    // Objetivos especiais
    if (levelNumber >= 4 && levelNumber % 3 == 1) {
      objectives[PetalType.caged2] = (levelNumber / 4).ceil().clamp(2, 8);
    }
    if (levelNumber >= 5 && levelNumber % 5 == 0) {
      objectives[PetalType.bomb] = 1;
    }

    return objectives;
  }

  /// üìä Calcula quantidade de objetivo
  int _getObjectiveCount(
    int levelNumber,
    LevelDifficulty difficulty,
    double multiplier,
  ) {
    final baseCount = switch (difficulty) {
      LevelDifficulty.easy => 12,
      LevelDifficulty.medium => 15,
      LevelDifficulty.hard => 18,
      LevelDifficulty.expert => 22,
    };

    return ((baseCount * multiplier) + (levelNumber * 0.5)).round().clamp(
      5,
      30,
    );
  }

  /// üé≤ Gera metas de pontua√ß√£o para as estrelas baseado no n√≠vel e dificuldade
  List<int> _generateStarThresholds(
    int levelNumber,
    LevelDifficulty difficulty,
  ) {
    // Fator base para a pontua√ß√£o
    final baseScore = 1500;
    // B√¥nus por n√≠vel
    final levelBonus = levelNumber * 150;
    // Multiplicador de dificuldade
    final difficultyMultiplier = switch (difficulty) {
      LevelDifficulty.easy => 1.0,
      LevelDifficulty.medium => 1.4,
      LevelDifficulty.hard => 1.8,
      LevelDifficulty.expert => 2.2,
    };

    // Calcula a pontua√ß√£o para a primeira estrela
    final oneStar = ((baseScore + levelBonus) * difficultyMultiplier).round();

    // As outras estrelas s√£o m√∫ltiplos da primeira
    return [
      oneStar, // 1 estrela
      (oneStar * 2.5).round(), // 2 estrelas
      (oneStar * 4).round(), // 3 estrelas
    ];
  }

  /// üó∫Ô∏è ‚úÖ CORRE√á√ÉO: Gera layout procedural como uma planta baixa de inteiros.
  List<dynamic> _generateProceduralLayout(
    int width,
    int height,
    int levelNumber,
  ) {
    final layout = <dynamic>[];
    final random = _createSeededRandom(levelNumber);

    for (int row = 0; row < height; row++) {
      for (int col = 0; col < width; col++) {
        if (row == 0) {
          // Primeira linha sempre vazia para spawn
          layout.add(PetalType.empty);
        } else {
          // Adiciona obst√°culos ocasionalmente
          if (_shouldAddObstacle(levelNumber, row, col, random)) {
            layout.add(_getRandomObstacleBlueprint(levelNumber, random));
          } else {
            // Adiciona um espa√ßo para pe√ßa jog√°vel
            layout.add(1);
          }
        }
      }
    }
    return layout;
  }

  /// üé≤ Cria random com seed baseada no n√≠vel.
  math.Random _createSeededRandom(int levelNumber) {
    return math.Random(levelNumber * 12345);
  }

  /// üß± Verifica se deve adicionar obst√°culo.
  bool _shouldAddObstacle(
    int levelNumber,
    int row,
    int col,
    math.Random random,
  ) {
    if (levelNumber < 2) return false;
    final obstacleChance = (levelNumber * 0.02).clamp(0.0, 0.15);
    return random.nextDouble() < obstacleChance;
  }

  /// üß± ‚úÖ CORRE√á√ÉO: Retorna um inteiro representando o obst√°culo da planta baixa.
  int _getRandomObstacleBlueprint(int levelNumber, math.Random random) {
    // Mapeamento: 0=Parede, 2=Jaula, 4=Bomba
    final obstacles = <int>[0];
    if (levelNumber >= 4) obstacles.add(2); // Jaula
    if (levelNumber >= 8) obstacles.add(2); // Aumenta chance de jaula
    if (levelNumber >= 5 && levelNumber % 5 == 0) obstacles.add(4); // Bomba

    return obstacles[random.nextInt(obstacles.length)];
  }

  /// üé® Obt√©m tema do n√≠vel
  String _getLevelTheme(int levelNumber) {
    final themes = [
      "da Primavera",
      "do Ver√£o",
      "do Outono",
      "do Inverno",
      "Secreto",
      "M√≠stico",
      "Encantado",
      "Celestial",
      "dos Sonhos",
      "da Harmonia",
      "da Serenidade",
      "da Sabedoria",
    ];
    return themes[(levelNumber - 1) % themes.length];
  }

  /// üìù Obt√©m descri√ß√£o do n√≠vel
  String _getLevelDescription(int levelNumber) {
    if (levelNumber <= 10) {
      return "Continue aprendendo as mec√¢nicas b√°sicas do jardim.";
    } else if (levelNumber <= 20) {
      return "Desafios mais complexos aguardam no jardim.";
    } else if (levelNumber <= 30) {
      return "Apenas mestres jardineiros chegam at√© aqui.";
    } else {
      return "O jardim revela seus segredos mais profundos.";
    }
  }

  /// ‚≠ê Obt√©m caracter√≠sticas especiais
  List<LevelFeature> _getSpecialFeatures(int levelNumber) {
    final features = <LevelFeature>[];

    if (levelNumber >= 2) features.add(LevelFeature.walls);
    if (levelNumber >= 3) features.add(LevelFeature.multiColor);
    if (levelNumber >= 4) features.add(LevelFeature.cages);
    if (levelNumber >= 5) features.add(LevelFeature.bombs);
    if (levelNumber >= 10) features.add(LevelFeature.timeLimit);
    if (levelNumber >= 15) features.add(LevelFeature.cascade);
    if (levelNumber >= 20) features.add(LevelFeature.powerUps);

    return features;
  }

  /// üîì Verifica se um n√≠vel est√° desbloqueado
  bool isLevelUnlocked(int levelNumber) {
    final gameState = GameStateManager.instance;
    return gameState.isLevelUnlocked(levelNumber);
  }

  /// üìä Obt√©m estat√≠sticas do n√≠vel
  LevelStats? getLevelStats(int levelNumber) {
    final gameState = GameStateManager.instance;
    final stats = gameState.getLevelStats(levelNumber);

    if (stats == null) return null;

    return LevelStats(
      attempts: stats['attempts'] ?? 0,
      bestMoves: stats['best_moves'],
      bestTime: stats['best_time'],
      bestScore: stats['best_score'],
      lastPlayed: stats['last_played'],
    );
  }

  /// üéØ Obt√©m pr√≥ximo n√≠vel dispon√≠vel
  int getNextAvailableLevel() {
    final gameState = GameStateManager.instance;
    return gameState.currentLevel;
  }

  /// üßπ Limpa cache de n√≠veis
  void clearCache() {
    _levelCache.clear();
    if (kDebugMode) {
      print("[LEVEL_MANAGER] üßπ Cache de n√≠veis limpo");
    }
  }

  /// üìä Obt√©m informa√ß√µes de debug
  Map<String, dynamic> getDebugInfo() {
    return {
      'cached_levels': _levelCache.keys.toList(),
      'cache_size': _levelCache.length,
      'next_available': getNextAvailableLevel(),
    };
  }
}

/// üìä Estat√≠sticas de um n√≠vel
class LevelStats {
  final int attempts;
  final int? bestMoves;
  final num? bestTime;
  final int? bestScore;
  final int? lastPlayed;

  LevelStats({
    required this.attempts,
    this.bestMoves,
    this.bestTime,
    this.bestScore,
    this.lastPlayed,
  });

  DateTime? get lastPlayedDate {
    if (lastPlayed == null) return null;
    return DateTime.fromMillisecondsSinceEpoch(lastPlayed!);
  }
}

/// üéØ Dificuldades de n√≠vel
enum LevelDifficulty { easy, medium, hard, expert }

/// ‚≠ê Caracter√≠sticas especiais dos n√≠veis
enum LevelFeature {
  tutorial,
  walls,
  multiColor,
  cages,
  bombs,
  timeLimit,
  cascade,
  powerUps,
}

/// üîß Extens√µes para facilitar o uso
extension LevelDifficultyExtension on LevelDifficulty {
  String get displayName {
    switch (this) {
      case LevelDifficulty.easy:
        return 'F√°cil';
      case LevelDifficulty.medium:
        return 'M√©dio';
      case LevelDifficulty.hard:
        return 'Dif√≠cil';
      case LevelDifficulty.expert:
        return 'Expert';
    }
  }

  Color get color {
    switch (this) {
      case LevelDifficulty.easy:
        return const Color(0xFF4CAF50);
      case LevelDifficulty.medium:
        return const Color(0xFFFF9800);
      case LevelDifficulty.hard:
        return const Color(0xFFE91E63);
      case LevelDifficulty.expert:
        return const Color(0xFF9C27B0);
    }
  }
}

extension LevelFeatureExtension on LevelFeature {
  String get displayName {
    switch (this) {
      case LevelFeature.tutorial:
        return 'Tutorial';
      case LevelFeature.walls:
        return 'Obst√°culos';
      case LevelFeature.multiColor:
        return 'M√∫ltiplas Cores';
      case LevelFeature.cages:
        return 'Jaulas';
      case LevelFeature.bombs:
        return 'Bombas';
      case LevelFeature.timeLimit:
        return 'Tempo Limitado';
      case LevelFeature.cascade:
        return 'Cascata';
      case LevelFeature.powerUps:
        return 'Power-ups';
    }
  }

  IconData get icon {
    switch (this) {
      case LevelFeature.tutorial:
        return Icons.school;
      case LevelFeature.walls:
        return Icons.block;
      case LevelFeature.multiColor:
        return Icons.palette;
      case LevelFeature.cages:
        return Icons.lock;
      case LevelFeature.bombs:
        return Icons.local_fire_department;
      case LevelFeature.timeLimit:
        return Icons.timer;
      case LevelFeature.cascade:
        return Icons.waterfall_chart;
      case LevelFeature.powerUps:
        return Icons.flash_on;
    }
  }
}
