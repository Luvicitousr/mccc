import 'package:flutter/material.dart';
import 'dart:math' as math;

/// üéá Overlay de Cria√ß√£o da Bomba - SEM ANIMA√á√ÉO DE ESCALA
/// Exibe efeitos visuais quando uma bomba √© criada a partir de uma combina√ß√£o de 5+ pe√ßas
/// ‚úÖ MODIFICA√á√ïES APLICADAS:
/// - Remo√ß√£o completa da anima√ß√£o de escala (_scaleAnimation)
/// - Remo√ß√£o de todas as refer√™ncias e depend√™ncias da escala
/// - Simplifica√ß√£o do c√≥digo mantendo apenas rota√ß√£o e brilho
class BombCreationOverlay extends StatefulWidget {
  final Offset position;
  final VoidCallback? onComplete;

  const BombCreationOverlay({
    super.key,
    required this.position,
    this.onComplete,
  });

  @override
  State<BombCreationOverlay> createState() => _BombCreationOverlayState();
}

class _BombCreationOverlayState extends State<BombCreationOverlay>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  // ‚ùå REMOVIDO: _scaleAnimation
  late Animation<double> _rotateAnimation;
  late Animation<double> _glowAnimation;

  // ‚úÖ SIMPLIFICADO: Constantes de valida√ß√£o (removidas as relacionadas √† escala)
  static const double _minAnimationValue = 0.0;
  static const double _maxAnimationValue = 1.0;
  static const double _minDuration = 0.1;
  static const double _maxDuration = 3.0;

  @override
  void initState() {
    super.initState();
    _initializeAnimations();
    _startAnimation();
  }

  void _initializeAnimations() {
    try {
      _controller = AnimationController(
        duration: const Duration(milliseconds: 1200),
        vsync: this,
      );

      // ‚ùå REMOVIDO: Toda a configura√ß√£o de _scaleAnimation

      // Anima√ß√£o de rota√ß√£o com m√∫ltiplas voltas
      _rotateAnimation = Tween<double>(
        begin: 0.0,
        end: 6 * math.pi, // Tr√™s voltas completas
      ).animate(CurvedAnimation(
        parent: _controller,
        curve: Curves.easeOutCubic,
      ));

      // Anima√ß√£o de brilho com pulsa√ß√£o intensa
      _glowAnimation = TweenSequence<double>([
        TweenSequenceItem(
            tween: Tween<double>(begin: 0.0, end: 1.0), weight: 15),
        TweenSequenceItem(
            tween: Tween<double>(begin: 1.0, end: 0.4), weight: 10),
        TweenSequenceItem(
            tween: Tween<double>(begin: 0.4, end: 1.0), weight: 10),
        TweenSequenceItem(
            tween: Tween<double>(begin: 1.0, end: 0.6), weight: 10),
        TweenSequenceItem(
            tween: Tween<double>(begin: 0.6, end: 1.0), weight: 10),
        TweenSequenceItem(
            tween: Tween<double>(begin: 1.0, end: 0.8), weight: 15),
        TweenSequenceItem(
            tween: Tween<double>(begin: 0.8, end: 1.0), weight: 15),
        TweenSequenceItem(
            tween: Tween<double>(begin: 1.0, end: 0.0), weight: 15),
      ]).animate(CurvedAnimation(
        parent: _controller,
        curve: Curves.easeInOut,
      ));
    } catch (e) {
      print("[BOMB_CREATION] Erro ao inicializar anima√ß√µes: $e");
      _initializeFallbackAnimations();
    }
  }

  /// Anima√ß√µes de fallback (sem escala)
  void _initializeFallbackAnimations() {
    // ‚ùå REMOVIDO: Configura√ß√£o de fallback para _scaleAnimation

    _rotateAnimation = Tween<double>(
      begin: 0.0,
      end: 4 * math.pi,
    ).animate(_controller);

    _glowAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(_controller);
  }

  void _startAnimation() {
    try {
      _controller.forward().then((_) {
        if (mounted) {
          widget.onComplete?.call();
        }
      });
    } catch (e) {
      print("[BOMB_CREATION] Erro ao iniciar anima√ß√£o: $e");
      widget.onComplete?.call();
    }
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Positioned.fill(
      child: AnimatedBuilder(
        animation: _controller,
        builder: (context, child) {
          // ‚úÖ SIMPLIFICADO: Removidas todas as refer√™ncias √† escala
          // ‚ùå REMOVIDO: final safeScale = _validateScaleValue(_scaleAnimation.value);
          final safeRotation = _validateRotationValue(_rotateAnimation.value);
          final safeGlow = _validateGlowValue(_glowAnimation.value);

          return CustomPaint(
            painter: BombCreationPainter(
              position: widget.position,
              // ‚ùå REMOVIDO: scale: safeScale,
              rotation: safeRotation,
              glowIntensity: safeGlow,
            ),
          );
        },
      ),
    );
  }

  // ‚ùå REMOVIDO: _validateScaleValue() - fun√ß√£o completamente removida

  /// ‚úÖ MANTIDO: Fun√ß√£o espec√≠fica para valida√ß√£o de brilho (0.0 - 1.0)
  double _validateGlowValue(double value) {
    if (value.isNaN || value.isInfinite) {
      return _minAnimationValue;
    }

    // Brilho deve ficar entre 0.0 e 1.0
    return value.clamp(_minAnimationValue, _maxAnimationValue);
  }

  /// ‚úÖ MANTIDO: Valida√ß√£o espec√≠fica para rota√ß√£o (permite valores grandes)
  double _validateRotationValue(double value) {
    if (value.isNaN || value.isInfinite) {
      return 0.0;
    }

    // Rota√ß√£o pode ser qualquer valor finito
    return value;
  }
}

/// üé® Painter para efeito de cria√ß√£o da bomba - SEM ESCALA
class BombCreationPainter extends CustomPainter {
  final Offset position;
  // ‚ùå REMOVIDO: final double scale;
  final double rotation;
  final double glowIntensity;

  // ‚úÖ SIMPLIFICADO: Constantes (removidas as relacionadas √† escala)
  static const double _minGlow = 0.0;
  static const double _maxGlow = 1.0;
  // ‚ùå REMOVIDO: Constantes de escala (_minScale, _maxScale)

  BombCreationPainter({
    required this.position,
    // ‚ùå REMOVIDO: required this.scale,
    required this.rotation,
    required this.glowIntensity,
  });

  @override
  void paint(Canvas canvas, Size size) {
    try {
      // ‚úÖ SIMPLIFICADO: Valida√ß√£o sem escala
      // ‚ùå REMOVIDO: final safeScale = scale.clamp(_minScale, _maxScale);
      final safeGlow = glowIntensity.clamp(_minGlow, _maxGlow);
      final safeRotation = rotation.isFinite ? rotation : 0.0;

      if (safeGlow <= 0.0) {
        return; // N√£o desenha se brilho inv√°lido
      }

      // Salva estado do canvas
      canvas.save();
      canvas.translate(position.dx, position.dy);
      canvas.rotate(safeRotation);
      // ‚ùå REMOVIDO: canvas.scale(safeScale);

      // Sistema de brilho em camadas (sem escala)
      _drawLayeredGlow(canvas, safeGlow);

      // C√≠rculo central com gradiente din√¢mico (sem escala)
      _drawCentralCircle(canvas, safeGlow);

      // Raios (sem escala din√¢mica)
      _drawEnhancedRays(canvas, safeGlow);

      // Part√≠culas orbitais (sem escala)
      _drawOrbitalParticles(canvas, safeGlow);

      // An√©is de energia (sem escala)
      _drawEnergyRings(canvas, safeGlow);

      // Restaura estado do canvas
      canvas.restore();
    } catch (e) {
      print("[BOMB_CREATION_PAINTER] Erro ao renderizar: $e");
      _drawFallbackEffect(canvas);
    }
  }

  /// Sistema de brilho em camadas (sem depend√™ncia de escala)
  void _drawLayeredGlow(Canvas canvas, double glowIntensity) {
    try {
      // Brilho externo (tamanho fixo)
      final outerGlowPaint = Paint()
        ..color = const Color(0xFFFFD700).withOpacity(glowIntensity * 0.3)
        ..maskFilter = const MaskFilter.blur(BlurStyle.normal, 35.0);

      canvas.drawCircle(Offset.zero, 80.0, outerGlowPaint);

      // Brilho m√©dio
      final middleGlowPaint = Paint()
        ..color = const Color(0xFFFFE082).withOpacity(glowIntensity * 0.5)
        ..maskFilter = const MaskFilter.blur(BlurStyle.normal, 20.0);

      canvas.drawCircle(Offset.zero, 60.0, middleGlowPaint);

      // Brilho interno (mais intenso)
      final innerGlowPaint = Paint()
        ..color = const Color(0xFFFFD700).withOpacity(glowIntensity * 0.8)
        ..maskFilter = const MaskFilter.blur(BlurStyle.normal, 15.0);

      canvas.drawCircle(Offset.zero, 40.0, innerGlowPaint);
    } catch (e) {
      print("[BOMB_CREATION_PAINTER] Erro ao desenhar brilho: $e");
    }
  }

  /// C√≠rculo central com gradiente din√¢mico (tamanho fixo)
  void _drawCentralCircle(Canvas canvas, double glowIntensity) {
    try {
      final gradient = RadialGradient(
        colors: [
          const Color(0xFFFFFFFF).withOpacity(glowIntensity * 0.9),
          const Color(0xFFFFE082).withOpacity(glowIntensity * 0.8),
          const Color(0xFFFFD700).withOpacity(glowIntensity * 0.7),
          const Color(0xFFFF8F00).withOpacity(glowIntensity * 0.5),
        ],
        stops: const [0.0, 0.3, 0.7, 1.0],
      );

      final circlePaint = Paint()
        ..shader = gradient.createShader(
          Rect.fromCircle(center: Offset.zero, radius: 35.0),
        );

      canvas.drawCircle(Offset.zero, 35.0, circlePaint);
    } catch (e) {
      print("[BOMB_CREATION_PAINTER] Erro ao desenhar c√≠rculo central: $e");
    }
  }

  /// Raios com tamanho fixo (sem escala din√¢mica)
  void _drawEnhancedRays(Canvas canvas, double glowIntensity) {
    try {
      final rayPaint = Paint()
        ..color = const Color(0xFFFFD700).withOpacity(glowIntensity * 0.9)
        ..style = PaintingStyle.stroke
        ..strokeWidth = 4.0; // ‚úÖ FIXO: Sem multiplica√ß√£o por escala

      const rayCount = 16;
      const innerRadius = 35.0;
      const outerRadius = 100.0; // ‚úÖ FIXO: Sem multiplica√ß√£o por escala

      for (int i = 0; i < rayCount; i++) {
        final angle = (i * 2 * math.pi) / rayCount;
        final startX = math.cos(angle) * innerRadius;
        final startY = math.sin(angle) * innerRadius;
        final endX = math.cos(angle) * outerRadius;
        final endY = math.sin(angle) * outerRadius;

        canvas.drawLine(
          Offset(startX, startY),
          Offset(endX, endY),
          rayPaint,
        );
      }
    } catch (e) {
      print("[BOMB_CREATION_PAINTER] Erro ao desenhar raios: $e");
    }
  }

  /// Part√≠culas orbitais com tamanho fixo (sem escala)
  void _drawOrbitalParticles(Canvas canvas, double glowIntensity) {
    try {
      const particleCount = 12;
      const orbitRadius = 60.0; // ‚úÖ FIXO: Sem multiplica√ß√£o por escala

      for (int i = 0; i < particleCount; i++) {
        final angle = (i * 2 * math.pi) / particleCount + (rotation * 0.3);
        final x = math.cos(angle) * orbitRadius;
        final y = math.sin(angle) * orbitRadius;

        final particlePaint = Paint()
          ..color = const Color(0xFFFFE082).withOpacity(glowIntensity * 0.8);

        canvas.drawCircle(
          Offset(x, y),
          5.0, // ‚úÖ FIXO: Sem multiplica√ß√£o por escala
          particlePaint,
        );
      }
    } catch (e) {
      print("[BOMB_CREATION_PAINTER] Erro ao desenhar part√≠culas orbitais: $e");
    }
  }

  /// An√©is de energia com tamanho fixo (sem escala)
  void _drawEnergyRings(Canvas canvas, double glowIntensity) {
    try {
      final ringPaint = Paint()
        ..color = const Color(0xFFFFD700).withOpacity(glowIntensity * 0.6)
        ..style = PaintingStyle.stroke
        ..strokeWidth = 2.0;

      // M√∫ltiplos an√©is conc√™ntricos com tamanho fixo
      for (int i = 1; i <= 3; i++) {
        final ringRadius =
            50.0 + (i * 15.0); // ‚úÖ FIXO: Sem multiplica√ß√£o por escala
        canvas.drawCircle(Offset.zero, ringRadius, ringPaint);
      }
    } catch (e) {
      print("[BOMB_CREATION_PAINTER] Erro ao desenhar an√©is de energia: $e");
    }
  }

  /// Efeito de fallback (sem escala)
  void _drawFallbackEffect(Canvas canvas) {
    try {
      canvas.save();
      canvas.translate(position.dx, position.dy);

      final fallbackPaint = Paint()
        ..color = const Color(0xFFFFD700).withOpacity(0.7);

      canvas.drawCircle(Offset.zero, 30.0, fallbackPaint);
      canvas.restore();
    } catch (e) {
      print("[BOMB_CREATION_PAINTER] Erro no fallback: $e");
    }
  }

  @override
  bool shouldRepaint(covariant BombCreationPainter oldDelegate) {
    // ‚ùå REMOVIDO: oldDelegate.scale != scale ||
    return oldDelegate.rotation != rotation ||
        oldDelegate.glowIntensity != glowIntensity;
  }
}
