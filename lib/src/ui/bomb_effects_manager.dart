import 'package:flutter/material.dart';
import 'package:flutter/foundation.dart';
import 'bomb_creation_overlay.dart';
import 'bomb_explosion_overlay.dart';
import 'bomb_tutorial_overlay.dart';
import 'bomb_tutorial_manager.dart';

/// üéÆ Gerenciador de Efeitos da Bomba - VERS√ÉO COM TUTORIAL IMEDIATO
/// ‚úÖ NOVA FUNCIONALIDADE: Tutorial exibido imediatamente ap√≥s cria√ß√£o da bomba
/// - Tutorial aparece assim que a anima√ß√£o de cria√ß√£o termina
/// - Bloqueia intera√ß√£o at√© o tutorial ser conclu√≠do
/// - Controle inteligente de quando mostrar tutorial
class BombEffectsManager {
  final BuildContext context;
  final Function(Widget) addOverlay;
  final Function(Widget) removeOverlay;

  // Controle de estado
  final List<Widget> _activeOverlays = [];

  // ‚úÖ NOVO: Gerenciador de tutorial persistente
  final BombTutorialManager _tutorialManager = BombTutorialManager.instance;

  // ‚úÖ NOVO: Controle de bloqueio de intera√ß√£o
  bool _isInteractionBlocked = false;

  BombEffectsManager({
    required this.context,
    required this.addOverlay,
    required this.removeOverlay,
  }) {
    // Inicializa o gerenciador de tutorial
    _initializeTutorialManager();
  }

  /// üöÄ Inicializa o gerenciador de tutorial
  Future<void> _initializeTutorialManager() async {
    try {
      await _tutorialManager.initialize();

      if (kDebugMode) {
        final status = await _tutorialManager.getDebugStatus();
        print("[BOMB_EFFECTS] Status do tutorial: $status");
      }
    } catch (e) {
      if (kDebugMode) {
        print("[BOMB_EFFECTS] Erro ao inicializar gerenciador de tutorial: $e");
      }
    }
  }

  /// üéØ Processa cria√ß√£o de bomba com tutorial imediato
  ///
  /// ‚úÖ NOVA IMPLEMENTA√á√ÉO: Tutorial exibido imediatamente ap√≥s anima√ß√£o
  /// Este m√©todo deve ser chamado quando uma bomba √© criada
  /// a partir de uma combina√ß√£o de 5+ pe√ßas
  Future<void> processBombCreationWithImmediateTutorial(Offset position) async {
    try {
      if (kDebugMode) {
        print(
            "[BOMB_EFFECTS] üéØ Processando cria√ß√£o de bomba com tutorial imediato");
      }

      // 1. Verifica se deve mostrar tutorial ANTES da anima√ß√£o
      final shouldShowTutorial = await _tutorialManager.processBombEncounter();

      if (kDebugMode) {
        print("[BOMB_EFFECTS] ü§î Deve mostrar tutorial: $shouldShowTutorial");
      }

      // 2. Exibe efeito de cria√ß√£o da bomba
      await _showBombCreationWithCallback(position, () async {
        // ‚úÖ CALLBACK EXECUTADO QUANDO ANIMA√á√ÉO TERMINA
        if (shouldShowTutorial) {
          if (kDebugMode) {
            print(
                "[BOMB_EFFECTS] üéì Exibindo tutorial imediatamente ap√≥s cria√ß√£o");
          }

          // 3. Bloqueia intera√ß√£o do jogo
          _blockGameInteraction();

          // 4. Mostra tutorial imediatamente
          await _showImmediateTutorial();

          // 5. Desbloqueia intera√ß√£o ap√≥s tutorial
          _unblockGameInteraction();
        }
      });

      if (kDebugMode) {
        print("[BOMB_EFFECTS] ‚úÖ Cria√ß√£o de bomba processada com tutorial");
      }
    } catch (e) {
      if (kDebugMode) {
        print("[BOMB_EFFECTS] ‚ùå Erro ao processar cria√ß√£o de bomba: $e");
      }

      // Garante que a intera√ß√£o seja desbloqueada em caso de erro
      _unblockGameInteraction();
    }
  }

  /// üéá Exibe efeito de cria√ß√£o da bomba com callback
  Future<void> _showBombCreationWithCallback(
      Offset position, VoidCallback onComplete) async {
    try {
      late final BombCreationOverlay creation;

      creation = BombCreationOverlay(
        position: position,
        onComplete: () {
          // Remove overlay
          _removeOverlay(creation);

          // ‚úÖ EXECUTA CALLBACK QUANDO ANIMA√á√ÉO TERMINA
          onComplete();
        },
      );

      _addOverlay(creation);

      if (kDebugMode) {
        print("[BOMB_EFFECTS] üéá Efeito de cria√ß√£o da bomba iniciado");
      }
    } catch (e) {
      if (kDebugMode) {
        print("[BOMB_EFFECTS] ‚ùå Erro ao exibir cria√ß√£o: $e");
      }

      // Executa callback mesmo em caso de erro
      onComplete();
    }
  }

  /// üéì Mostra tutorial imediato com bloqueio de intera√ß√£o
  Future<void> _showImmediateTutorial() async {
    try {
      // Cria uma barreira que bloqueia toda intera√ß√£o
      late final Widget tutorialBarrier;

      tutorialBarrier = _buildTutorialBarrier(() async {
        // Remove barreira quando tutorial √© fechado
        _removeOverlay(tutorialBarrier);

        // Marca tutorial como completado
        await _tutorialManager.completeTutorial();

        if (kDebugMode) {
          print("[BOMB_EFFECTS] üéì Tutorial imediato conclu√≠do");
        }
      });

      // Adiciona barreira que cobre toda a tela
      _addOverlay(tutorialBarrier);

      if (kDebugMode) {
        print("[BOMB_EFFECTS] üõ°Ô∏è Tutorial imediato exibido com bloqueio");
      }
    } catch (e) {
      if (kDebugMode) {
        print("[BOMB_EFFECTS] ‚ùå Erro ao mostrar tutorial imediato: $e");
      }
    }
  }

  /// üõ°Ô∏è Constr√≥i barreira de tutorial que bloqueia toda intera√ß√£o
  Widget _buildTutorialBarrier(VoidCallback onDismiss) {
    return Positioned.fill(
      child: Container(
        // ‚úÖ BARREIRA COMPLETA: Cobre toda a tela
        width: double.infinity,
        height: double.infinity,
        color: Colors.transparent, // Transparente mas captura toques
        child: Stack(
          children: [
            // Fundo que absorve todos os toques
            Positioned.fill(
              child: GestureDetector(
                onTap: () {}, // Absorve toques sem fazer nada
                onPanStart: (_) {}, // Absorve gestos
                onPanUpdate: (_) {}, // Absorve gestos
                onPanEnd: (_) {}, // Absorve gestos
                child: Container(
                  color: Colors.black.withOpacity(
                      0.01), // Quase transparente mas captura toques
                ),
              ),
            ),

            // Tutorial sobreposto
            BombTutorialOverlay(
              onDismiss: onDismiss,
            ),
          ],
        ),
      ),
    );
  }

  /// üîí Bloqueia intera√ß√£o do jogo
  void _blockGameInteraction() {
    _isInteractionBlocked = true;

    if (kDebugMode) {
      print("[BOMB_EFFECTS] üîí Intera√ß√£o do jogo bloqueada para tutorial");
    }
  }

  /// üîì Desbloqueia intera√ß√£o do jogo
  void _unblockGameInteraction() {
    _isInteractionBlocked = false;

    if (kDebugMode) {
      print("[BOMB_EFFECTS] üîì Intera√ß√£o do jogo desbloqueada");
    }
  }

  /// üéØ M√©todo legado mantido para compatibilidade
  ///
  /// ‚ö†Ô∏è DEPRECIADO: Use processBombCreationWithImmediateTutorial() ao inv√©s deste m√©todo
  @Deprecated(
      'Use processBombCreationWithImmediateTutorial() para controle autom√°tico do tutorial')
  Future<void> processBombCreation(Offset position) async {
    if (kDebugMode) {
      print(
          "[BOMB_EFFECTS] ‚ö†Ô∏è M√©todo processBombCreation() est√° depreciado. Use processBombCreationWithImmediateTutorial()");
    }

    // Chama o novo m√©todo para manter compatibilidade
    await processBombCreationWithImmediateTutorial(position);
  }

  /// üéØ Exibe tutorial da bomba (M√âTODO LEGADO - mantido para compatibilidade)
  ///
  /// ‚ö†Ô∏è DEPRECIADO: Use processBombCreationWithImmediateTutorial() ao inv√©s deste m√©todo
  @Deprecated(
      'Use processBombCreationWithImmediateTutorial() para controle autom√°tico do tutorial')
  void showBombTutorial() {
    if (kDebugMode) {
      print(
          "[BOMB_EFFECTS] ‚ö†Ô∏è M√©todo showBombTutorial() est√° depreciado. Use processBombCreationWithImmediateTutorial()");
    }

    // Chama o novo m√©todo para manter compatibilidade
    processBombCreationWithImmediateTutorial(Offset.zero);
  }

  /// üí• Exibe efeito de explos√£o da bomba
  void showBombExplosion(Offset center, double radius) {
    try {
      // Valida√ß√£o de par√¢metros
      final validRadius = radius.clamp(10.0, 500.0);

      late final BombExplosionOverlay explosion;

      explosion = BombExplosionOverlay(
        center: center,
        radius: validRadius,
        onComplete: () => _removeOverlay(explosion),
      );

      _addOverlay(explosion);

      if (kDebugMode) {
        print("[BOMB_EFFECTS] üí• Efeito de explos√£o exibido");
      }
    } catch (e) {
      if (kDebugMode) {
        print("[BOMB_EFFECTS] ‚ùå Erro ao exibir explos√£o: $e");
      }
    }
  }

  /// üéá Exibe efeito de cria√ß√£o da bomba (m√©todo interno legado)
  void showBombCreation(Offset position) {
    try {
      late final BombCreationOverlay creation;

      creation = BombCreationOverlay(
        position: position,
        onComplete: () => _removeOverlay(creation),
      );

      _addOverlay(creation);

      if (kDebugMode) {
        print(
            "[BOMB_EFFECTS] üéá Efeito de cria√ß√£o da bomba exibido (m√©todo legado)");
      }
    } catch (e) {
      if (kDebugMode) {
        print("[BOMB_EFFECTS] ‚ùå Erro ao exibir cria√ß√£o: $e");
      }
    }
  }

  /// ‚ú® Exibe efeito de rea√ß√£o em cadeia
  void showChainReaction(List<Offset> bombPositions) {
    try {
      // Implementa√ß√£o futura: efeito visual de conex√£o entre bombas
      if (kDebugMode) {
        print(
            "[BOMB_EFFECTS] ‚ú® Efeito de rea√ß√£o em cadeia para ${bombPositions.length} bombas");
      }
    } catch (e) {
      if (kDebugMode) {
        print("[BOMB_EFFECTS] ‚ùå Erro ao exibir rea√ß√£o em cadeia: $e");
      }
    }
  }

  /// üßπ Limpa todos os efeitos ativos
  void clearAllEffects() {
    try {
      final overlays = List<Widget>.from(_activeOverlays);
      for (final overlay in overlays) {
        _removeOverlay(overlay);
      }

      // ‚úÖ NOVO: Desbloqueia intera√ß√£o ao limpar efeitos
      _unblockGameInteraction();

      if (kDebugMode) {
        print("[BOMB_EFFECTS] üßπ Todos os efeitos foram limpos");
      }
    } catch (e) {
      if (kDebugMode) {
        print("[BOMB_EFFECTS] ‚ùå Erro ao limpar efeitos: $e");
      }
      // For√ßa limpeza da lista em caso de erro
      _activeOverlays.clear();
      _unblockGameInteraction();
    }
  }

  /// ‚ûï Adiciona overlay √† tela
  void _addOverlay(Widget overlay) {
    try {
      _activeOverlays.add(overlay);
      addOverlay(overlay);
    } catch (e) {
      if (kDebugMode) {
        print("[BOMB_EFFECTS] ‚ùå Erro ao adicionar overlay: $e");
      }
    }
  }

  /// ‚ûñ Remove overlay da tela
  void _removeOverlay(Widget overlay) {
    try {
      _activeOverlays.remove(overlay);
      removeOverlay(overlay);
    } catch (e) {
      if (kDebugMode) {
        print("[BOMB_EFFECTS] ‚ùå Erro ao remover overlay: $e");
      }
    }
  }

  /// üîß M√©todos de debug (apenas em modo debug)

  /// Reset do tutorial para testes
  Future<void> resetTutorialForDebug() async {
    if (!kDebugMode) return;

    await _tutorialManager.resetTutorialFlags();
    print("[BOMB_EFFECTS] üîÑ Tutorial resetado para debug");
  }

  /// Status do tutorial para debug
  Future<Map<String, dynamic>> getTutorialDebugStatus() async {
    if (!kDebugMode) return {};

    return await _tutorialManager.getDebugStatus();
  }

  /// üìä Getters para estado
  int get activeOverlaysCount => _activeOverlays.length;
  bool get isInteractionBlocked => _isInteractionBlocked;

  /// ‚úÖ NOVO: Getter para status do tutorial
  Future<bool> get hasTutorialBeenShown =>
      _tutorialManager.hasTutorialBeenShown();
  Future<bool> get shouldShowTutorial => _tutorialManager.shouldShowTutorial();
}
