import 'dart:async';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import '../engine/petal_piece.dart';
import '../engine/level_definition.dart';
import '../game/enhanced_move_validation_system.dart';

/// üé≤ Gerenciador Inteligente de Shuffle
///
/// Respons√°vel por:
/// 1. Detectar quando n√£o h√° jogadas v√°lidas
/// 2. Executar shuffle com anima√ß√£o
/// 3. Notificar o jogador sobre o processo
/// 4. Garantir que o resultado tenha jogadas v√°lidas
class IntelligentShuffleManager {
  final LevelDefinition level;
  final List<PetalPiece> pieces;
  final VoidCallback? onShuffleComplete;
  final Function(String)? onStatusUpdate;

  bool _isShuffling = false;
  Timer? _shuffleTimer;

  IntelligentShuffleManager({
    required this.level,
    required this.pieces,
    this.onShuffleComplete,
    this.onStatusUpdate,
  });

  /// üéØ Verifica se h√° jogadas v√°lidas e executa shuffle se necess√°rio
  Future<bool> checkAndShuffleIfNeeded() async {
    if (_isShuffling) {
      if (kDebugMode) {
        print(
            "[SHUFFLE_MANAGER] ‚è∏Ô∏è Shuffle j√° em andamento, ignorando solicita√ß√£o");
      }
      return false;
    }

    final validationSystem = EnhancedMoveValidationSystem(
      level: level,
      pieces: pieces,
    );

    // Verifica se h√° jogadas v√°lidas
    if (validationSystem.hasValidMovesAvailable()) {
      if (kDebugMode) {
        print(
            "[SHUFFLE_MANAGER] ‚úÖ Jogadas v√°lidas encontradas, shuffle n√£o necess√°rio");
      }
      return false;
    }

    if (kDebugMode) {
      print(
          "[SHUFFLE_MANAGER] üö® Nenhuma jogada v√°lida encontrada, iniciando shuffle...");
    }

    // Executa o shuffle com anima√ß√£o
    return await _executeShuffleWithAnimation(validationSystem);
  }

  /// üé¨ Executa shuffle com anima√ß√£o e feedback visual
  Future<bool> _executeShuffleWithAnimation(
      EnhancedMoveValidationSystem validationSystem) async {
    _isShuffling = true;

    try {
      // Notifica in√≠cio do shuffle
      _updateStatus("üé≤ Embaralhando pe√ßas...");

      // Anima√ß√£o de prepara√ß√£o (pe√ßas tremulam)
      await _animateShufflePreparation();

      // Executa o shuffle inteligente
      _updateStatus("üîÑ Reorganizando tabuleiro...");
      final shuffleResult = await validationSystem.executeIntelligentShuffle();

      if (shuffleResult.success) {
        // Anima√ß√£o de conclus√£o
        _updateStatus("‚úÖ Novas jogadas dispon√≠veis!");
        await _animateShuffleCompletion();

        if (kDebugMode) {
          print(
              "[SHUFFLE_MANAGER] ‚úÖ Shuffle conclu√≠do com sucesso: ${shuffleResult.message}");
        }

        // Notifica conclus√£o
        onShuffleComplete?.call();

        return true;
      } else {
        _updateStatus("‚ùå Falha no embaralhamento");

        if (kDebugMode) {
          print(
              "[SHUFFLE_MANAGER] ‚ùå Falha no shuffle: ${shuffleResult.message}");
        }

        return false;
      }
    } catch (e) {
      _updateStatus("‚ùå Erro durante embaralhamento");

      if (kDebugMode) {
        print("[SHUFFLE_MANAGER] ‚ùå Erro durante shuffle: $e");
      }

      return false;
    } finally {
      _isShuffling = false;

      // Limpa status ap√≥s delay
      Timer(const Duration(seconds: 2), () {
        _updateStatus("");
      });
    }
  }

  /// üé≠ Anima√ß√£o de prepara√ß√£o para o shuffle
  Future<void> _animateShufflePreparation() async {
    if (kDebugMode) {
      print("[SHUFFLE_MANAGER] üé≠ Iniciando anima√ß√£o de prepara√ß√£o...");
    }

    // Simula anima√ß√£o de tremula√ß√£o das pe√ßas
    for (int i = 0; i < 3; i++) {
      await Future.delayed(const Duration(milliseconds: 200));

      // Aqui voc√™ pode adicionar l√≥gica para fazer as pe√ßas tremularem
      // Por exemplo, alterando ligeiramente suas posi√ß√µes
      _animatePieceShake();
    }
  }

  /// üéâ Anima√ß√£o de conclus√£o do shuffle
  Future<void> _animateShuffleCompletion() async {
    if (kDebugMode) {
      print("[SHUFFLE_MANAGER] üéâ Iniciando anima√ß√£o de conclus√£o...");
    }

    // Simula anima√ß√£o de brilho ou destaque nas pe√ßas
    await Future.delayed(const Duration(milliseconds: 500));

    // Aqui voc√™ pode adicionar efeitos visuais de conclus√£o
    _animatePieceHighlight();
  }

  /// üì≥ Simula tremula√ß√£o das pe√ßas
  void _animatePieceShake() {
    // Implementa√ß√£o futura: fazer pe√ßas tremularem ligeiramente
    // Pode usar Transform.translate com valores pequenos e aleat√≥rios

    if (kDebugMode) {
      print("[SHUFFLE_MANAGER] üì≥ Animando tremula√ß√£o das pe√ßas...");
    }
  }

  /// ‚ú® Simula destaque das pe√ßas
  void _animatePieceHighlight() {
    // Implementa√ß√£o futura: destacar pe√ßas com brilho ou mudan√ßa de cor tempor√°ria

    if (kDebugMode) {
      print("[SHUFFLE_MANAGER] ‚ú® Animando destaque das pe√ßas...");
    }
  }

  /// üì¢ Atualiza status para o jogador
  void _updateStatus(String message) {
    onStatusUpdate?.call(message);

    if (kDebugMode && message.isNotEmpty) {
      print("[SHUFFLE_MANAGER] üì¢ Status: $message");
    }
  }

  /// üßπ Limpa recursos
  void dispose() {
    _shuffleTimer?.cancel();
    _isShuffling = false;
  }

  /// üìä Getters para estado atual
  bool get isShuffling => _isShuffling;

  /// üéØ For√ßa um shuffle (para debug/teste)
  Future<bool> forceShuffle() async {
    if (kDebugMode) {
      print("[SHUFFLE_MANAGER] üîß Shuffle for√ßado solicitado");
    }

    final validationSystem = EnhancedMoveValidationSystem(
      level: level,
      pieces: pieces,
    );

    return await _executeShuffleWithAnimation(validationSystem);
  }
}

/// üé® Widget para exibir status do shuffle
class ShuffleStatusWidget extends StatefulWidget {
  final String message;
  final bool isVisible;

  const ShuffleStatusWidget({
    super.key,
    required this.message,
    required this.isVisible,
  });

  @override
  State<ShuffleStatusWidget> createState() => _ShuffleStatusWidgetState();
}

class _ShuffleStatusWidgetState extends State<ShuffleStatusWidget>
    with SingleTickerProviderStateMixin {
  late AnimationController _animationController;
  late Animation<double> _fadeAnimation;
  late Animation<double> _scaleAnimation;

  @override
  void initState() {
    super.initState();

    _animationController = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );

    _fadeAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _animationController,
      curve: Curves.easeInOut,
    ));

    _scaleAnimation = Tween<double>(
      begin: 0.8,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _animationController,
      curve: Curves.easeOutBack,
    ));
  }

  @override
  void didUpdateWidget(ShuffleStatusWidget oldWidget) {
    super.didUpdateWidget(oldWidget);

    if (widget.isVisible != oldWidget.isVisible) {
      if (widget.isVisible) {
        _animationController.forward();
      } else {
        _animationController.reverse();
      }
    }
  }

  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    if (!widget.isVisible && widget.message.isEmpty) {
      return const SizedBox.shrink();
    }

    return AnimatedBuilder(
      animation: _animationController,
      builder: (context, child) {
        return FadeTransition(
          opacity: _fadeAnimation,
          child: ScaleTransition(
            scale: _scaleAnimation,
            child: Container(
              padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
              margin: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.black.withOpacity(0.8),
                borderRadius: BorderRadius.circular(20),
                border: Border.all(
                  color: Colors.amber.withOpacity(0.5),
                  width: 1,
                ),
              ),
              child: Text(
                widget.message,
                style: const TextStyle(
                  color: Colors.white,
                  fontSize: 16,
                  fontWeight: FontWeight.w600,
                ),
                textAlign: TextAlign.center,
              ),
            ),
          ),
        );
      },
    );
  }
}
